<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>理解运用JavaScript中的apply和call</title>
      <link href="/posts/c6adc021/"/>
      <url>/posts/c6adc021/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">    res.<span class="property">push</span>.<span class="title function_">apply</span>(res, <span class="title function_">preorderTraversal</span>(root.<span class="property">left</span>));</span><br><span class="line">    res.<span class="property">push</span>.<span class="title function_">apply</span>(res, <span class="title function_">preorderTraversal</span>(root.<span class="property">right</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在以上二叉树前序遍历的解法中，可以使用 <code>apply()</code> 来合并两个数组，但知其然而不知其所以然，看了MDN的文档并没有完全理解，所以在网上搜索寻找答案，以此记录总结。</p><h1 id="1-MDN-解释"><a href="#1-MDN-解释" class="headerlink" title="1. MDN 解释"></a>1. MDN 解释</h1><p>虽然没完全看懂，但是可以先看看基本的定义。</p><h2 id="1-1-apply"><a href="#1-1-apply" class="headerlink" title="1.1. apply()"></a>1.1. apply()</h2><p>MDN：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply() - JavaScript | MDN</a></p><blockquote><p>The <strong><code>apply()</code></strong> method calls a function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">array-like object</a>).</p></blockquote><h2 id="1-2-call"><a href="#1-2-call" class="headerlink" title="1.2. call()"></a>1.2. call()</h2><p>MDN:   <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call() - JavaScript | MDN</a></p><blockquote><p>The <strong><code>call()</code></strong> method calls a function with a given <code>this</code> value and arguments provided individually.</p></blockquote><p>call()方法的作用和 apply() 方法类似，区别就是<code>call()</code>方法接受的是<strong>参数列表</strong>，而<code>apply()</code>方法接受的是<strong>一个参数数组</strong>。</p><h1 id="2-深入理解-apply-和-call"><a href="#2-深入理解-apply-和-call" class="headerlink" title="2. 深入理解 apply() 和 call()"></a>2. 深入理解 apply() 和 call()</h1><h2 id="2-1-apply-示例"><a href="#2-1-apply-示例" class="headerlink" title="2.1 apply 示例"></a>2.1 apply 示例</h2><h3 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h3><p>如下定义对象 <code>fruit</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fruits</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">fruits.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My color is &quot;</span> + <span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> fruits;</span><br><span class="line">apple.<span class="title function_">say</span>();    <span class="comment">//My color is red</span></span><br></pre></td></tr></table></figure><p>如果有一个对象 <code>banana= &#123;color : &quot;yellow&quot;&#125;</code> , 我们不想对它重新定义 <code>say</code> 方法，那么我们可以通过 <code>call</code> 或 <code>apply</code> 用 <code>apple</code> 的 <code>say</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">banana = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;yellow&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">apple.<span class="property">say</span>.<span class="title function_">call</span>(banana);     <span class="comment">//My color is yellow</span></span><br><span class="line">apple.<span class="property">say</span>.<span class="title function_">apply</span>(banana);    <span class="comment">//My color is yellow</span></span><br></pre></td></tr></table></figure><p>所以，可以看出 <code>call</code> 和 <code>apply</code> 是为了动态改变 <code>this</code> 而出现的，当一个 object 没有某个方法，但是其他的有，我们可以借助 <code>call</code> 或<code>apply</code> 用其它对象的方法来操作。</p><h3 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义一个人类*/</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name; <span class="variable language_">this</span>.<span class="property">age</span>=age; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*定义一个学生类*/</span> </span><br><span class="line"><span class="title function_">functionStudent</span>(name,age,grade) &#123; </span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>); <span class="variable language_">this</span>.<span class="property">grade</span>=grade; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//创建一个学生类 </span></span><br><span class="line"><span class="keyword">var</span> student=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;qian&quot;</span>,<span class="number">21</span>,<span class="string">&quot;一年级&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//测试 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>+student.<span class="property">name</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;age:&quot;</span>+student.<span class="property">age</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;grade:&quot;</span>+student.<span class="property">grade</span>); </span><br><span class="line"><span class="comment">//输出： name:qian age:21 grade:一年级 </span></span><br><span class="line"><span class="comment">//学生类里面没有给name和age属性赋值,但又存在这两个属性的值呢</span></span><br></pre></td></tr></table></figure><p>分析:  <code>Person.apply(this,arguments);</code></p><p><strong>this:</strong>   在创建对象在这个时候代表的是 <code>student</code></p><p><strong>arguments:</strong>  是一个数组(伪数组),  也就是 [“qian”, “21”, “一年级”];</p><p>通俗解释:   用 <code>student</code> 去执行 <code>Person</code> 这个类里面的内容,  在 <code>Person</code> 这个类里面存在 <code>this.name</code> 等之类的语句,  这样就将属性创建到了<code>student</code>对象里面。</p><h2 id="2-2-call-示例"><a href="#2-2-call-示例" class="headerlink" title="2.2. call 示例"></a>2.2. call 示例</h2><h3 id="call-vs-apply"><a href="#call-vs-apply" class="headerlink" title="call() vs apply()"></a>call() vs apply()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">arg1, arg2</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用call和apply</span></span><br><span class="line">func.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg1, arg2);</span><br><span class="line">func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [arg1, arg2]);</span><br></pre></td></tr></table></figure><p>this  是指定的上下文，可以是任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。　　</p><h3 id="在example2中使用"><a href="#在example2中使用" class="headerlink" title="在example2中使用"></a>在example2中使用</h3><p>在 <code>student</code>  函数里面可以将 <code>apply</code> 修改为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name,age);</span><br></pre></td></tr></table></figure><h2 id="2-3-apply-和-call-的使用场景"><a href="#2-3-apply-和-call-的使用场景" class="headerlink" title="2.3 apply 和 call 的使用场景"></a>2.3 apply 和 call 的使用场景</h2><h3 id="1-什么时候使用apply"><a href="#1-什么时候使用apply" class="headerlink" title="1)  什么时候使用apply"></a>1)  什么时候使用apply</h3><ul><li>参数形式为数组时,  比如apply example2 里面传递的参数arguments,  为数组类型,  并且调用Person时参数列表是对应一致的(Person和Student的参数列表前两位是一致的), 就可以采用 apply。</li><li>参数数量不确定时,  可以用 apply把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个伪数组来遍历所有的参数。</li></ul><h3 id="2-什么时候使用call"><a href="#2-什么时候使用call" class="headerlink" title="2) 什么时候使用call"></a>2) 什么时候使用call</h3><ul><li><p>如果apply example2中参数列表是(age,name),   而Student参数列表是(name,age,grade), 则可以用call来实现, 即直接指定参数列表对应值的位置 <code>Person.call(this,age,name,grade)</code> ；</p></li><li><p>或当明确知道参数数量时用 call 。</p></li></ul><h2 id="2-4-apply的巧妙用法"><a href="#2-4-apply的巧妙用法" class="headerlink" title="2.4 apply的巧妙用法"></a>2.4 apply的巧妙用法</h2><h3 id="2-4-1-用-apply-将数组各项添加到另一个数组"><a href="#2-4-1-用-apply-将数组各项添加到另一个数组" class="headerlink" title="2.4.1 用 apply 将数组各项添加到另一个数组"></a>2.4.1 用 apply 将数组各项添加到另一个数组</h3><p>MDN：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#using_apply_to_append_an_array_to_another">Using apply to append an array to another</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在MDN中的例子</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> elements = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="property">push</span>.<span class="title function_">apply</span>(array, elements);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(array); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, 0, 1, 2]</span></span><br></pre></td></tr></table></figure><p><mark style="background: #FFF3A3A6;"><mark style="background: #FF5582A6;">重点</mark> ：<code>apply()</code> 可以将一个数组默认的转换为一个参数列表 ( 即 <code>[param1,param2,param3]</code> 转换为 <code>param1,param2,param3</code> ) </mark></p><blockquote><p>我们可以使用<code>push</code>将元素追加到数组中。由于push接受可变数量的参数，所以也可以一次追加多个元素。</p><p>但是，如果<code>push</code>的参数是数组，它会将该数组作为单个元素添加，而不是将这个数组内的每个元素添加进去，因此我们最终会得到一个数组内的数组。如果不想这样呢？<code>concat</code>符合我们的需求，但它并不是将元素添加到现有数组，而是创建并返回一个新数组。 </p><p><code>apply()</code>  正好解决了这个问题</p></blockquote><h3 id="2-4-2-使用apply和内置函数"><a href="#2-4-2-使用apply和内置函数" class="headerlink" title="2.4.2 使用apply和内置函数"></a>2.4.2 使用<code>apply</code>和内置函数</h3><p>MDN: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#using_apply_and_built-in_functions">Using apply and built-in functions</a></p><p>对于一些需要写循环以遍历数组各项的需求，我们可以用<code>apply</code>完成以避免循环。</p><p>下面是示例，我们将用<code>Math.max</code>&#x2F;<code>Math.min</code>求得数组中的最大&#x2F;小值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 找出数组中最大/小的数字 */</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用Math.min/Math.max以及apply 函数时的代码 */</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers); <span class="comment">/* 基本等同于 Math.max(numbers[0], ...) 或 Math.max(5, 6, ..) */</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对比：简单循环算法 */</span></span><br><span class="line">max = -<span class="title class_">Infinity</span>, min = +<span class="title class_">Infinity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (numbers[i] &gt; max)</span><br><span class="line">    max = numbers[i];</span><br><span class="line">  <span class="keyword">if</span> (numbers[i] &lt; min)</span><br><span class="line">    min = numbers[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样 <code>Math.max</code> 和 <code>Math.min</code> 不接受数组作为参数，但是接受多个参数作为参数，所以可以利用 <code>apply()</code> 将数组转换为参数列表传入进去。</p><h3 id="2-4-3-验证是否是数组（前提是toString-方法没有被重写过）"><a href="#2-4-3-验证是否是数组（前提是toString-方法没有被重写过）" class="headerlink" title="2.4.3 验证是否是数组（前提是toString()方法没有被重写过）"></a>2.4.3 验证是否是数组（前提是toString()方法没有被重写过）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">functionisArray</span>(obj)&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Array]&#x27;</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString#using_tostring_to_detect_object_class" title="Permalink to Using toString() to detect object class">Using toString() to detect object class</a></p><h3 id="2-4-5-类（伪）数组使用数组方法"><a href="#2-4-5-类（伪）数组使用数组方法" class="headerlink" title="2.4.5  类（伪）数组使用数组方法"></a>2.4.5  类（伪）数组使用数组方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domNodes = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;*&quot;</span>));</span><br></pre></td></tr></table></figure><p>Javascript 中存在一种名为伪数组的对象结构。比较特别的是 arguments 对象，还有像调用  <code>getElementsByTagName</code> , <code>document.childNodes</code> 之类的，它们返回 NodeList 对象都属于伪数组。不能应用 Array下的 push , pop 等方法。</p><p>但是我们能通过 <code>Array.prototype.slice.call</code> 转换为真正的数组的带有 length 属性的对象，这样 domNodes 就可以应用 Array 下的所有方法了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call() - JavaScript | MDN</a></li><li><a href="https://blog.csdn.net/business122/article/details/8000676">Js apply()使用详解_农村的我的博客-CSDN博客_apply js</a></li><li>如何理解和熟练运用 JS 中的 call 及 apply？ - 杨志的回答 - 知乎 <a href="https://www.zhihu.com/question/20289071/answer/14644278">https://www.zhihu.com/question/20289071/answer/14644278</a></li><li>如何理解和熟练运用 JS 中的 call 及 apply？ - 寇云的回答 - 知乎 <a href="https://www.zhihu.com/question/20289071/answer/258643285">https://www.zhihu.com/question/20289071/answer/258643285</a></li><li><a href="https://segmentfault.com/a/1190000020941541">快速理解js中的call，apply - SegmentFault 思否</a></li><li><a href="https://www.cnblogs.com/coco1s/p/4833199.html">【优雅代码】深入浅出 妙用Javascript中apply、call、bind - ChokCoco - 博客园</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript Syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github pages搭建博客</title>
      <link href="/posts/b8f4bd70/"/>
      <url>/posts/b8f4bd70/</url>
      
        <content type="html"><![CDATA[<h1 id="1-博客部署"><a href="#1-博客部署" class="headerlink" title="1. 博客部署"></a>1. 博客部署</h1><h2 id="1-1-安装-hexo"><a href="#1-1-安装-hexo" class="headerlink" title="1.1. 安装 hexo"></a>1.1. 安装 hexo</h2><ul><li><p><strong>官方文档</strong>：<a href="https://hexo.io/zh-cn/">Hexo-快速、简洁且高效的博客框架</a></p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-一键部署到-github-pages"><a href="#1-2-一键部署到-github-pages" class="headerlink" title="1.2. 一键部署到 github pages"></a>1.2. 一键部署到 github pages</h2><ul><li><p>官方文档：<a href="https://hexo.io/zh-cn/docs/one-command-deployment#Git">hexo一键部署</a></p></li><li><p>在自己的github仓库中新建一个 <code>username.github.io</code> 仓库，这个仓库用于部署github pages</p></li><li><p>hexo目录下安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></li><li><p>在根目录下 <code>_config.yml</code> 文件添加以下配置</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: &lt;repository url&gt; #https://github.com/username/username.github.io</span><br><span class="line">branch: [branch]</span><br><span class="line">message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认</th></tr></thead><tbody><tr><td align="left"><code>repo</code></td><td align="left">库（Repository）地址</td><td align="left"></td></tr><tr><td align="left"><code>branch</code></td><td align="left">分支名称</td><td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td></tr><tr><td align="left"><code>message</code></td><td align="left">自定义提交信息</td><td align="left"><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr></tbody></table></li><li><p>生成站点文件并推送至远程库, 执行 <code>hexo clean &amp;&amp; hexo deploy</code>。</p></li><li><p>登入 Github，在库设置（settings-&gt;pages）中将默认分支设置为<code>_config.yml</code>配置中的分支名称。稍等片刻，站点就会显示在Github Pages中。</p></li></ul><h2 id="1-3-绑定已备案的域名"><a href="#1-3-绑定已备案的域名" class="headerlink" title="1.3. 绑定已备案的域名"></a>1.3. 绑定已备案的域名</h2><ul><li><p>首先当然是购买一个域名，到阿里云，腾讯云等都可以购买，并且域名需要备案。</p></li><li><p>买好之后到域名的解析设置页面，点击<code>添加解析</code>按钮，分别添加一个<code>CNAME</code>类型解析和两个<code>A</code>类的解析。</p><table><thead><tr><th align="left">主机记录</th><th align="left">记录类型</th><th align="left">解析路线</th><th align="left">记录值</th><th align="right">TTL</th><th>状态</th></tr></thead><tbody><tr><td align="left">@</td><td align="left">A</td><td align="left">默认</td><td align="left">192.30.252.154</td><td align="right">10 分钟</td><td>正常</td></tr><tr><td align="left">@</td><td align="left">A</td><td align="left">默认</td><td align="left">192.30.252.153</td><td align="right">10 分钟</td><td>正常</td></tr><tr><td align="left">blog</td><td align="left">CNAME</td><td align="left">默认</td><td align="left">skylyyun.github.io</td><td align="right">10 分钟</td><td>正常</td></tr></tbody></table></li><li><p><code>CNAME</code>里的主机记录代表域名前缀, 如果你只想让某个二级域名跳转到你的博客页面，那就在这里设置二级域名，比如<code>www</code>或<code>blog</code>，我的域名为leiyiyun.com, 如上图就只会解析到我的<code>blog.leiyiyun.com</code>到博客页面。</p><p><code>A</code>类型解析主机记录选择<code>@</code>，记录值分别填写<code>192.30.252.153</code>和<code>192.30.252.154</code>，这两个是github提供的固定解析地址。</p></li><li><p>域名设置结束，需要添加 <code>CNAME</code> 文件，两种方式添加：</p><ol><li>在hexo目录中的<code>source</code>文件夹中新建<code>CNAME</code>文件，并在文件中写入设置好的解析地址，比如我应该写入<code>blog.leiyiyun.com</code>。</li><li>在github对应仓库的设置页面添加域名即可（settings-&gt;pages-&gt;custom domain）</li></ol></li><li><p>执行下面的命令将代码更新到远端仓库, 再访问 blog.leiyiyun.com 就可以看到博客已经部署成功了。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">hexo g</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">hexo d</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2. 配置主题"></a>2. 配置主题</h1><p>我先后用的主题分别是极简的next, 和现在很好看的butterfly,  所以这两个主题的问题都会有些记录。</p><h2 id="2-1-butterfly"><a href="#2-1-butterfly" class="headerlink" title="2.1 butterfly"></a>2.1 butterfly</h2><blockquote><p> <a href="https://butterfly.js.org/posts/21cfbf15/">butterfly</a>: 一款很好看的hexo主题<br>安装文档非常详细，强力推荐，绝大部分的设置和功能看这个安装文档都能解决。</p></blockquote><p>这里记录一下安装完成我对这个主题一些颜色字体大小等的修改，因为有些设置用户改不了，或者改的效果不对，这些设置我就直接在主题源文件改了。</p><ul><li><p>字体设置，<code>themes\butterfly\source\css\var.styl</code> 文件中将 <code>$dafault-font-family</code>  修改为思源字体的设置：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dafault-<span class="attribute">font-family</span> = &#x27;Source Sans <span class="number">3</span>&#x27;, &#x27;Source Sans Pro&#x27;, &#x27;Noto Sans&#x27;, &#x27;Roboto&#x27;, ui-sans-serif, sans-serif, &#x27;Apple <span class="attribute">Color</span> Emoji&#x27;, &#x27;Segoe UI Emoji&#x27;, &#x27;Segoe UI Symbol&#x27;, &#x27;Noto <span class="attribute">Color</span> Emoji&#x27;, emoji;</span><br></pre></td></tr></table></figure></li><li><p>文章字体颜色修改 <code>themes\butterfly\source\css\var.styl</code></p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="attribute">font</span>-black =<span class="selector-id">#24292f</span></span><br></pre></td></tr></table></figure></li><li><p>文章字体大小修改  <code>themes\butterfly\source\css\_layout\post.styl</code> ,<br>在<code>article-container</code> 添加<code>font-size</code> </p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">  overflow-wrap: break-word</span><br><span class="line">  font-size: <span class="number">1.15em</span></span><br></pre></td></tr></table></figure></li><li><p>经过修改后，实现了我比较喜欢的显示效果，就是博客现在看起来的效果，如果我后面又改了当我没说 :)</p></li></ul><h2 id="2-2-Next"><a href="#2-2-Next" class="headerlink" title="2.2. Next"></a>2.2. Next</h2><blockquote><p><a href="https://github.com/next-theme/hexo-theme-next">Next</a>: 简约主题<br>这里记录以前遇到的问题</p></blockquote><h3 id="2-2-1-首页文章添加阴影-next"><a href="#2-2-1-首页文章添加阴影-next" class="headerlink" title="2.2.1. 首页文章添加阴影-next"></a>2.2.1. 首页文章添加阴影-next</h3><p>  V 7.7.1版本没有<code>blog\themes\next\source\css\_custom\custom.styl</code>文件，打开<code>next\source\css\_common\components\post</code>下的<code>post.styl</code>文件。</p><img src="https://cdn.leiyiyun.com/post-img/hb-hexo/hb-hexo-image6.png" style="zoom:50%;" /><p>  如上图，找到.post-block 并添加如下代码：</p>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> <span class="selector-class">.post-block</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  效果：</p><img src="https://cdn.leiyiyun.com/post-img/hb-hexo/hb-hexo-20200214100423922.png" style="zoom: 33%;" /><h1 id="3-图片设置"><a href="#3-图片设置" class="headerlink" title="3. 图片设置"></a>3. 图片设置</h1><p>图片插入我也用过两种方法 </p><ul><li><p>之前的博客是搭在服务器上，所以图片也传到了服务器上，相当于本地引用。   </p></li><li><p>使用七牛云等云服务引用图片。</p></li></ul><h2 id="3-1-本地引用时的图片显示问题"><a href="#3-1-本地引用时的图片显示问题" class="headerlink" title="3.1. 本地引用时的图片显示问题"></a>3.1. 本地引用时的图片显示问题</h2><ul><li><p>参照  <a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo博客搭建之在文章中插入图片</a>  这篇文章使用相对路径可以正常发图，但是后面发现因为我的博文生成的是永久链接，导致只能使用标签插件语法。</p></li><li><p>发图之后发现图片显示过大，欲调显示比例，标签插件语法（如下）：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.<span class="property">jpg</span> <span class="title class_">This</span> is an image %&#125;</span><br></pre></td></tr></table></figure></li><li><p>尝试使用typora里面插入图片的语法（如下）：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/Users/lyy/Library/Application Support/typora-user-images/image-20200213233811415.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image-20200213233811415&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom: 50%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  根据相对路径的方法改为：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">image-20200213233811415.png</span> <span class="attr">style</span>=<span class="string">&quot;zoom: 50%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  发到网站上发现查看图片链接地址：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:4000/archives/Hexo-Next%E9%85%8D%E7%BD%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20200213233811415.png</span></span><br></pre></td></tr></table></figure><p>  Hexo-Next%E…B3这一段是我的同名文件夹的名称, 但是少了一段abbrlink对应的一段字符(如下图)</p>  <img src="https://cdn.leiyiyun.com/post-img/hb-hexo/hb-hexo-image2.png" style="zoom:50%;" /><p>  所以修改为：</p></li></ul><img src="https://cdn.leiyiyun.com/post-img/hb-hexo/hb-hexo-image1.png" style="zoom:50%;" /><ul><li>每次都要复制abbrlink比较麻烦, 可能是永久链接的锅，把站点配置文件的permalink:改回默认的:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;，再用 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">image-20200213233811415.png</span> <span class="attr">style</span>=<span class="string">&quot;zoom: 50%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure> 显示正常，网站图片链接路径正常，缩放也正常。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>不要用标签插件语法</li><li>相对路径有问题，可能是 <code>post_asset_folder</code> 的默认设置原因。</li></ul><h2 id="3-2-利用图床插入图片"><a href="#3-2-利用图床插入图片" class="headerlink" title="3.2 利用图床插入图片"></a>3.2 利用图床插入图片</h2><p>我现在使用的就是用七牛云图床插入图片， 配置为<code>typora + picGo + 七牛云</code>。<br>typora + picGo + 七牛云的配置具体可以参考下面几篇文章。</p><ul><li><a href="https://jiapeng.me/markdown-picbed/">七牛云 + 备案域名 + 免费 SSL + PicGo 搭建 Typora 图床</a></li><li><a href="https://www.jianshu.com/p/0997d0d15e55">如何用七牛和picGO设置免费图床</a></li><li><a href="https://sspai.com/post/63461">七牛云图床简易配置教程 | 以 MWeb 为例</a></li><li><a href="https://zhuanlan.zhihu.com/p/141610018">picgo使用七牛云图床</a></li></ul><p>进阶使用（在线处理图片等）可以参考下面这篇文章。</p><ul><li><a href="https://ishanshan.im/#/wr/HbMarkdownImage">这样用七牛，插图优雅又省心 · MarkDown 码字发文最佳实践</a></li></ul><p>而且用了图床之后可以直接使用typora的图片缩放写法。</p><h1 id="4-其他设置"><a href="#4-其他设置" class="headerlink" title="4. 其他设置"></a>4. 其他设置</h1><h2 id="4-1-启用RSS订阅"><a href="#4-1-启用RSS订阅" class="headerlink" title="4.1. 启用RSS订阅"></a>4.1. 启用RSS订阅</h2><p>  1.下载插件：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>  2.在站点配置文件_config.yml中添加：<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: <span class="number">20</span></span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: <span class="number">140</span></span><br><span class="line">  content_limit_delim: <span class="string">&#x27; &#x27;</span></span><br><span class="line">  order_by: -date</span><br><span class="line">  icon: icon.png</span><br><span class="line">  autodiscovery: true</span><br><span class="line">  template:</span><br></pre></td></tr></table></figure></p><p>  1.在主题配置文件_config.yml中修改：<br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site&#x27;s feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line">rss: /atom.xml <span class="comment">//注意：有一个空格</span></span><br></pre></td></tr></table></figure></p><p><strong>相关阅读</strong> :</p><ul><li><a href="https://www.flikfill.com/848.html">带你走进RSS订阅，了解RSS为什么没落</a> </li><li><a href="https://blog.51cto.com/prepared/3130093">程序员如何使用RSS订阅网站更新</a></li></ul><h1 id="5-问题解决"><a href="#5-问题解决" class="headerlink" title="5. 问题解决"></a>5. 问题解决</h1><h2 id="5-1-修改主题后网站不更新"><a href="#5-1-修改主题后网站不更新" class="headerlink" title="5.1. 修改主题后网站不更新"></a>5.1. 修改主题后网站不更新</h2><p>  尝试方法：<br>    1. 删除.deploy_git 和 public 文件夹，再执行hexo clean , hexo g , hexo d。</p><img src="https://cdn.leiyiyun.com/post-img/hb-hexo/hb-hexo-20200214120300489.png" style="zoom: 50%;" /><ol start="2"><li>chrome 浏览器f12开控制台，勾选disable cache。</li></ol><img src="https://cdn.leiyiyun.com/post-img/hb-hexo/hb-hexo-image3.png" style="zoom:50%;" />  <ol start="3"><li>试了以上两种方法都没成功，最后在浏览器清除所有浏览数据后更新成功。</li></ol><h1 id="6-插件推荐"><a href="#6-插件推荐" class="headerlink" title="6. 插件推荐"></a>6. 插件推荐</h1><ul><li><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a>： 为每个页面生成唯一的永久链接</li><li><a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>: 字数统计</li></ul><h1 id="7-相关参考"><a href="#7-相关参考" class="headerlink" title="7. 相关参考"></a>7. 相关参考</h1><ul><li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li><li><a href="https://blog.csdn.net/qq_39119496/article/details/103372437">Hexo博客的Next主题 7.5版本给首页文章添加阴影</a></li><li><a href="http://blog.runningcoder.me/2017/12/29/create-personal-blog-with-github-and-hexo-extend/">手摸手教你用github和hexo搭建个人博客（番外篇）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> handbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
